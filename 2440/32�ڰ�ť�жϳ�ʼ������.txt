中断初始化流程
-----------------------------------------------------------
1. 建立异常向量表
	1) 实现（跳转） reset_handler
	2) 实现（跳转） irq_handler
	
2. 设置(必要模式下的)堆栈 sp
	1) 设置 SVC 模式下的 sp 为 0x1000
	2) 切换工作模式到 IRQ ，设置 sp 为 0x800
	3) 切换工作模式回到 SVC	

3. 跳转到 C 程序的入口处 c_entry

4. 关闭看门狗
	1) 设置 WTCON 寄存器相应位为 关闭

5. 关闭蜂鸣器
	1) 设置 GPBCON 寄存器 GPB0 为输出
	2) 设置 GPBDAT 寄存器 GPB0 输出值为0	
	
6. 初始化中断源SW1=K1 (GPIO Controller) 
	1) 设置键盘扫描方式下的工作条件 GPB8=0, GPB9=1
	2) 设置中断输入源 GPF0 的工作模式为 EINT0 (外部中断0)
	3) 设置外部中断0(EXTINT0寄存器)的触发模式为 下降沿 (falling edge)
	
7. 初始化中断控制器(Interrupt Controller)
	1) 设置中断屏蔽寄存器(INTMSK) 的0号中断为 不屏蔽 （其他的中断源都是屏蔽状态）
	2) 清除中断悬挂寄存器(INTPND) 的所有位，以确保没有之前残留的中断Pending	

8. 打开 ARM 内核中的 CPSR 中的 I bit ，使能中断
	1) 设置 CPSR 的 bit7 = 0
	

进入到主程序流程
-----------------------------------------------------------
9. 主程序实现一个死循环，以加法计数器的方式点灯，等待用户中断


发生用户中断，进入到中断处理流程
-----------------------------------------------------------
10. 处理器发生IRQ异常，自动跳转到异常向量表中IRQ异常入口0x18处，执行跳转指令，跳转到 irq_handler

11. 进入到 irq_handler，进行中断异常的处理
	1) 调整保存在r14中的返回地址，减4
	2) 保存处理器现场，将r0-r12, r14压栈(sp_irq)
	3) 跳转到C语言实现的中断处理程序	
		3.1 清除SRCPND寄存器中的相应bit位(bit0)
		3.2 清除INTPND寄存器中的相应bit位(bit0)
		3.3 进行中断处理. (闪灯，蜂鸣)
	4) 恢复处理器现场(出栈操作)，同时恢复工作模式到 SVC 模式(LDMFD {}^)
	
12. 程序返回到被中断的主程序中，继续执行，就像没有被中断过一样。


