标  题: wav格式分析zz
发信站: 北大未名站 (2003年06月17日16:00:32 星期二), 转信

http://wlbookwl.myrice.com/jck/1031Wav.htm
注意以上图文并茂，和下面文字不同

　　WAVE文件作为多媒体中使用的声波文件格式之一，它是以RIFF格式为标准的。
RIFF是英文Resource Interchange File Format的缩写，每个WAVE文件的头四个
字节便是“RIFF”。WAVE文件由文件头和数据体两大部分组成。其中文件头又分
为RIFF／WAV文件标识段和声音数据格式说明段两部分。WAVE文件各部分内容及
格式见附表。
　　常见的声音文件主要有两种，分别对应于单声道（11.025KHz采样率、8Bit
的采样值）和双声道（44.1KHz采样率、16Bit的采样值）。采样率是指：声音信
号在“模→数”转换过程中单位时间内采样的次数。采样值是指每一次采样周期
内声音模拟信号的积分值。
　　对于单声道声音文件，采样数据为八位的短整数（short int 00H-FFH）；
而对于双声道立体声声音文件，每次采样数据为一个16位的整数（int），高八
位和低八位分别代表左右两个声道。
WAVE文件数据块包含以脉冲编码调制（PCM）格式表示的样本。WAVE文
件是由样本组织而成的。在单声道WAVE文件中，声道0代表左声道，声道1代表右
声道。在多声道WAVE文件中，样本是交替出现的。
　　WAVE文件格式说明表　　
　 偏移地址 字节数 数据类型 内 容
 　
文件头
00H 4 char "RIFF"标志
04H 4 long int 文件长度
08H 4 char "WAVE"标志
0CH 4 char "fmt"标志
10H 4 　 过渡字节（不定）
14H 2 int 格式类别（10H为PCM形式的声音数据)
16H 2 int 通道数，单声道为1，双声道为2
18H 2 int 采样率（每秒样本数），表示每个通道的播放速度，
1CH 4 long int 波形音频数据传送速率，其值为通道数×每秒数据位数×每样
本的数据位数／8。播放软件利用此值可以估计缓冲区的大小。
20H 2 int 数据块的调整数（按字节算的），其值为通道数×每样本的数据位
值／8。播放软件需要一次处理多个该值大小的字节数据，以便将其
值用于缓冲区的调整。
22H 2 　 每样本的数据位数，表示每个声道中各个样本的数据位数。如果有多
个声道，对每个声道而言，样本大小都一样。
24H 4 char 数据标记符＂data＂
28H 4 long int 语音数据的长度
　　PCM数据的存放方式：
　 样本1 样本2
8位单声道 0声道 0声道
8位立体声 0声道（左） 1声道（右） 0声道（左） 1声道（右）
16位单声道 0声道低字节 0声道高字节 0声道低字节 0声道高字节
16位立体声 0声道（左）低字节 0声道（左）高字节 1声道（右）低字节 1声道（右）
高字节
　WAVE文件的每个样本值包含在一个整数i中，i的长度为容纳指定样本长度所需
的最小字节数。首先存储低有效字节，表示样本幅度的位放在i的高有效位上，
剩下的位置为0，这样8位和16位的PCM波形样本的数据格式如下所示。 　
样本大小 数据格式 最大值 最小值
8位PCM unsigned int 225 0
16位PCM int 32767
通常无论是语音识别还是语音合成，都不会去使用音频文件，而是直接通过控制声卡来
进行播放与采集
简单的方法是调用微软的API函数：
Waveform Functions
The following functions are used with waveform audio.
auxGetDevCaps
auxGetNumDevs
auxGetVolume
auxOutMessage
auxSetVolume
PlaySound
sndPlaySound
waveInAddBuffer
waveInClose
waveInGetDevCaps
waveInGetErrorText
waveInGetID
waveInGetNumDevs
waveInGetPosition
waveInMessage
waveInOpen
waveInPrepareHeader
waveInProc
waveInReset
waveInStart
waveInStop
waveInUnprepareHeader
waveOutBreakLoop
waveOutClose
waveOutGetDevCaps
waveOutGetErrorText
waveOutGetID
waveOutGetNumDevs
waveOutGetPitch
waveOutGetPlaybackRate
waveOutGetPosition
waveOutGetVolume
waveOutMessage
waveOutOpen
waveOutPause
waveOutPrepareHeader
waveOutProc
waveOutReset
waveOutRestart
waveOutSetPitch
waveOutSetPlaybackRate
waveOutSetVolume
waveOutUnprepareHeader
waveOutWrite
对于声音采集的流程是先申请一块内存空间，得到地址指针及大小，制定采样频率及精
度等参数，然后初始化声卡并提交内存地址指针，声卡会自动向这块内存中填写声音的
量化值，当填写完时会发出一个满的消息（WIM_DATA）通知你去处理，得到消息的同时
可以提交另一块内存，这样处理与录制两不误:)
对于播放流程与录制类似，可以参照有关帮助系统(MSDN)，这里就不废话啦:)
至于怎样播放的甜美，就看你对要播放的数据修饰的怎样了